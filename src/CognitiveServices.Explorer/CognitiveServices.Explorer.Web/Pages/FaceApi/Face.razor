@page "/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}/persistedFaces/{PersonFaceId}"
@using CognitiveServices.Explorer.Domain.Face
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Face @PersonId</h3>

<div>
    <label>Face API Key:</label>
    <input type="password" @bind-value="@faceApiKey" />
</div>
<div>
    <label>Base URL:</label>
    <input type="text" @bind-value="@faceApiBaseUrl" />
</div>

<button class="btn btn-primary" @onclick="GetFace">Get face (1 TR)</button>

<pre>
@rawJson
</pre>

<table border="1">
    <thead>
        <tr>
            <th>Persisted Face Id</th>
            <th>User Data</th>
        </tr>
    </thead>
    <tbody>
        @if (face != null)
        {
            <tr>
                <td>@face.PersistedFaceId</td>
                <td>@face.UserData</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string PersonGroupId { get; set; }
    [Parameter]
    public string PersonId { get; set; }
    [Parameter]
    public string PersonFaceId { get; set; }

    string faceApiKey = string.Empty;
    string faceApiBaseUrl = string.Empty;
    string rawJson = string.Empty;
    FaceDto face = null;

    protected override async Task OnInitializedAsync()
    {
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        await GetFace();
    }

    public async Task GetFace()
    {
        faceApiBaseUrl = faceApiBaseUrl.TrimEnd('/');

        await localStorage.SetItemAsync(nameof(faceApiKey), faceApiKey);
        await localStorage.SetItemAsync(nameof(faceApiBaseUrl), faceApiBaseUrl);

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", faceApiKey);
        var result = await client.GetAsync(faceApiBaseUrl + $"/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}/persistedFaces/{PersonFaceId}");
        rawJson = await result.Content.ReadAsStringAsync();

        try
        {
            face = Newtonsoft.Json.JsonConvert.DeserializeObject<FaceDto>(rawJson);
        }
        catch
        {
        }
    }
}
