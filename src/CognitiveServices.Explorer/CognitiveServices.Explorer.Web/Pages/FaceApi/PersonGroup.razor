@page "/face/v1.0/persongroups/{PersonGroupId}/persons"
@using CognitiveServices.Explorer.Domain.Face
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<FaceApiConfiguration />

<div class="content">
    <h3>Person Group @PersonGroupId</h3>

    <div class="py-2">
        @if (people != null && people.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th> &nbsp; </th>
                            <th>Person Id</th>
                            <th>Name</th>
                            <th>Number of faces</th>
                            <th>User Data</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var person in people)
                        {
                            var imageUrl = string.Empty;
                            if (!string.IsNullOrWhiteSpace(person.UserData) && person.UserData.StartsWith("{"))
                            {
                                var customUserData = Newtonsoft.Json.JsonConvert.DeserializeObject<UserDataWithImageUrl>(person.UserData);
                                imageUrl = customUserData.GetImageUrl();
                            }
                            <tr>
                                <td>
                                    @if (!string.IsNullOrWhiteSpace(imageUrl))
                                    {
                                        <img src="@imageUrl" width="40" />
                                    }
                                    else
                                    {
                                        <span>&nbsp;</span>
                                    }
                                </td>
                                <td><a href="face/v1.0/persongroups/@PersonGroupId/persons/@person.PersonId">@person.PersonId</a></td>
                                <td>@person.Name</td>
                                <td>@(person.PersistedFaceIds?.Count ?? 0)</td>
                                <td><code>@CropText(person.UserData)</code></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else if (people != null)
        {
            <div class="alert alert-warning" role="alert">No identities found in the group @PersonGroupId</div>
        }
        else
        {
            <div class="alert alert-info" role="alert">Loading data from face API... (1 transaction cost)</div>
        }
    </div>

    <div>
        <a href="javascript(void)" @onclick="ToggleRequest"></a>
        <button class="btn btn-secondary btn-sm" @onclick="ToggleRequest">> @(showRequest ? "Hide" : "Show") request</button>

        @if (showRequest)
        {
<pre>
@request
</pre>
        }
    </div>
</div>

@code {
    [Parameter]
    public string PersonGroupId { get; set; }

    string faceApiKey = string.Empty;
    string faceApiBaseUrl = string.Empty;
    string rawJson = string.Empty;
    List<PersonDto> people = null;
    bool showRequest = false;
    string request = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        await GetPeople();
    }

    public async Task GetPeople()
    {
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", faceApiKey);
        var result = await client.GetAsync(faceApiBaseUrl + $"/face/v1.0/persongroups/{PersonGroupId}/persons");
        rawJson = await result.Content.ReadAsStringAsync();

        try
        {
            UpdateRequestOutput();
            people = await Task.Run(() => Newtonsoft.Json.JsonConvert.DeserializeObject<List<PersonDto>>(rawJson));
        }
        catch
        {
        }
    }

    public void ToggleRequest()
    {
        UpdateRequestOutput();
        showRequest = !showRequest;
    }

    public void UpdateRequestOutput()
    {
        request = $@"curl -X GET \
  '{faceApiBaseUrl}/face/v1.0/persongroups/{PersonGroupId}/persons' \
  -H 'Content-Type: application/json' \
  -H 'Ocp-Apim-Subscription-Key: {faceApiKey}'";
    }

    public string CropText(string text, int maxLength = 20)
    {
        if (text?.Length > maxLength)
        {
            return text.Substring(0, 20) + "...";
        }

        return text;
    }
}
