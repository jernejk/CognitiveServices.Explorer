@page "/face/v1.0/persongroups/{PersonGroupId}/persons"
@using CognitiveServices.Explorer.Domain.Face
@using CognitiveServices.Explorer.Application.ViewModels.FaceApi
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@inject PersonGroupsPersonViewModel viewModel

<FaceApiConfiguration OnUpdated="viewModel.LoadLatestConfig" />

<div class="content">
    <h3>Person Group @PersonGroupId</h3>

    <div class="py-2">
        @if (viewModel.People != null && viewModel.People.Any())
        {
            <MatTable Items="viewModel.People" FilterByColumnName="Name" SortBy="Name" Striped="true">
                <MatTableHeader>
                    <th style="padding: 0"></th>
                    <th><span style="width: 200px;">Person</span></th>
                    <th>User Data</th>
                </MatTableHeader>
                <MatTableRow>
                    <td style="padding: 0">
                        <MatIconButton Icon="edit" OnClick="@(() => ShowUpdatePersonDialog(context))"></MatIconButton>
                        <MatIconButton Icon="delete" OnClick="@(() => ShowDeletePersonDialog(context))"></MatIconButton>
                    </td>
                    <td>
                        <div style="width: 140px;">
                            <div class="pull-left mr-2">
                                <img src="@GetImageUrl(context.UserData)" width="40" />
                            </div>
                            <div class="pl-2">
                                <a href="face/v1.0/persongroups/@PersonGroupId/persons/@context.PersonId">@context.Name</a><br />
                            </div>
                        </div>
                    </td>
                    <td class="pb-0"><UserData Person="context"></UserData></td>
                </MatTableRow>
            </MatTable>
        }
        else if (viewModel.People != null)
        {
            <div class="alert alert-warning" role="alert">No identities found in the group @PersonGroupId</div>
        }
        else
        {
            <div class="alert alert-info" role="alert">Loading data from face API... (1 transaction cost)</div>
        }
    </div>

    <MatButton Raised="true" Icon="add" OnClick="@ShowCreatePersonDialog">Create person</MatButton>
    <MatButton Raised="true" Icon="refresh" OnClick="@viewModel.GetPeople">Refresh</MatButton>
    <MatButton Raised="true" Icon="memory" OnClick="@ShowTrainingPopup">Training</MatButton>
    <CurlRequestList Requests="viewModel.Requests" ServiceConfig="viewModel.FaceApiConfig" />
</div>

<MatDialog @bind-IsOpen="@_createOrEditPersonDialogOpen">
    <MatDialogTitle>@(_isCreatingPerson ? "Add new" : "Edit") person</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@_person" OnValidSubmit="@CreateOrUpdatePerson">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                @if (!_isCreatingPerson)
                {
                <div class="form-group">
                    <MatTextField @bind-Value="@_person.PersonId" ReadOnly="true" Label="Id" Icon="supervisor_account" IconTrailing="true" FullWidth="true" Required="false"></MatTextField>
                </div>
                }
                <div class="form-group">
                    <MatTextField @bind-Value="@_person.Name" Label="Name" Icon="translate" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@_person.UserData" Label="User data (optional)" Icon="view_list" IconTrailing="true" FullWidth="true" Required="false"></MatTextField>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _createOrEditPersonDialogOpen = false; })">Cancel</MatButton>
        <MatButton Raised="true" OnClick="@CreateOrUpdatePerson">@(_isCreatingPerson ? "Create" : "Edit") Person</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_deleteDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
    <MatDialogContent>
        Are you sure you want to delete person "@_person?.Name"?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _deleteDialogOpen = false; })">Cancel</MatButton>
        <MatButton Raised="true" OnClick="@DeletePerson">Delete</MatButton>
    </MatDialogActions>
</MatDialog>

<TrainingPopup ShowPopup="@_isTrainingPopupVisible"
               Train="@viewModel.Train"
               RefreshTrainingStatus="@viewModel.RefreshTrainingStatus"
               TrainingStatus="@viewModel.TrainingStatus"
               Close="@(() => { _isTrainingPopupVisible = false; })" />

@code {
    [Parameter] public string? PersonGroupId { get; set; }

    private bool _isTrainingPopupVisible;
    private bool _createOrEditPersonDialogOpen;
    private bool _isCreatingPerson;
    private bool _deleteDialogOpen;
    private PersonDto _person = new PersonDto();

    protected override async Task OnInitializedAsync()
    {
        viewModel.PersonGroupId = PersonGroupId;
        await viewModel.OnInitializedAsync();
        await viewModel.GetPeople();
    }

    public string? CropText(string? text, int maxLength = 20)
    {
        if (text?.Length > maxLength)
        {
            return text.Substring(0, 20) + "...";
        }

        return text;
    }

    public string? GetImageUrl(string? userData)
    {
        var imageUrl = string.Empty;
        if (userData?.StartsWith("{") == true)
        {
            var customUserData = System.Text.Json.JsonSerializer.Deserialize<UserDataWithImageUrl>(userData);
            imageUrl = customUserData.GetImageUrl();
        }

        if (string.IsNullOrWhiteSpace(imageUrl))
        {
            imageUrl = "images/Face/anonymous-avatar.jpg";
        }

        return imageUrl;
    }

    public void ShowTrainingPopup()
    {
        _isTrainingPopupVisible = true;
    }

    public async Task CreateOrUpdatePerson()
    {
        if (_isCreatingPerson)
        {
            await viewModel.CreatePerson(_person);
        }
        else
        {
            await viewModel.UpdatePerson(_person);
        }

        _createOrEditPersonDialogOpen = false;
    }

    public void ShowCreatePersonDialog()
    {
        _isCreatingPerson = true;
        _createOrEditPersonDialogOpen = true;
    }

    public void ShowUpdatePersonDialog(PersonDto person)
    {
        _person = new PersonDto
        {
            PersonId = person.PersonId,
            Name = person.Name,
            UserData = person.UserData
        };

        _isCreatingPerson = false;
        _createOrEditPersonDialogOpen = true;
    }

    public void ShowDeletePersonDialog(PersonDto person)
    {
        _person = person;
        _deleteDialogOpen = true;
    }

    public async Task DeletePerson()
    {
        if (!string.IsNullOrWhiteSpace(_person.PersonId))
        {
            await viewModel.DeletePerson(_person.PersonId!);
        }

        _person = new PersonDto();
        _deleteDialogOpen = false;
    }
}
