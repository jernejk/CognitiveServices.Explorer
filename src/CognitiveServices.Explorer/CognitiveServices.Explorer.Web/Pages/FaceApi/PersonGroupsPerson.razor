@page "/face/v1.0/persongroups/{PersonGroupId}/persons"
@using CognitiveServices.Explorer.Domain.Face
@using CognitiveServices.Explorer.Application.ViewModels.FaceApi
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@inject PersonGroupsPersonViewModel viewModel

<FaceApiConfiguration OnUpdated="viewModel.LoadLatestConfig" />

<div class="content">
    <h3>Person Group @PersonGroupId</h3>

    <div class="py-2">
        @if (viewModel.People != null && viewModel.People.Any())
        {
            <MatTable Items="viewModel.People" FilterByColumnName="Name" SortBy="Name" Striped="true">
                <MatTableHeader>
                    <th style="width: 50px;"> &nbsp; </th>
                    <th>Person Id</th>
                    <th>Name</th>
                    <th>Number of faces</th>
                    <th>User Data</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>
                        @{
                            string? imageUrl = GetImageUrl(context.UserData);
                            if (!string.IsNullOrWhiteSpace(imageUrl))
                            {
                            <img src="@imageUrl" width="40" />
                            }
                            else
                            {
                            <span>&nbsp;</span>
                            }
                        }
                    </td>
                    <td><a href="face/v1.0/persongroups/@PersonGroupId/persons/@context.PersonId">@context.PersonId</a></td>
                    <td>@context.Name</td>
                    <td>@(context.PersistedFaceIds?.Count ?? 0)</td>
                    <td><code>@CropText(context.UserData)</code></td>
                </MatTableRow>
            </MatTable>
        }
        else if (viewModel.People != null)
        {
            <div class="alert alert-warning" role="alert">No identities found in the group @PersonGroupId</div>
        }
        else
        {
            <div class="alert alert-info" role="alert">Loading data from face API... (1 transaction cost)</div>
        }
    </div>

    <MatButton Raised="true" Icon="refresh" OnClick="@viewModel.GetPeople">Refresh</MatButton>
    <MatButton Raised="true" Icon="memory" OnClick="@ShowTrainingPopup">Training</MatButton>
    <CurlRequestList Requests="viewModel.Requests" ServiceConfig="viewModel.FaceApiConfig" />
</div>

<TrainingPopup
    ShowPopup="@IsTrainingPopupVisible"
    Train="@viewModel.Train"
    RefreshTrainingStatus="@viewModel.RefreshTrainingStatus"
    TrainingStatus="@viewModel.TrainingStatus"
    Close="@(() => { IsTrainingPopupVisible = false; })"/>

@code {
    [Parameter] public string? PersonGroupId { get; set; }

    bool IsTrainingPopupVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        viewModel.PersonGroupId = PersonGroupId;
        await viewModel.OnInitializedAsync();
        await viewModel.GetPeople();
    }

    public string? CropText(string? text, int maxLength = 20)
    {
        if (text?.Length > maxLength)
        {
            return text.Substring(0, 20) + "...";
        }

        return text;
    }

    public string? GetImageUrl(string userData)
    {
        var imageUrl = string.Empty;
        if (userData?.StartsWith("{") == true)
        {
            var customUserData = Newtonsoft.Json.JsonConvert.DeserializeObject<UserDataWithImageUrl>(userData);
            imageUrl = customUserData.GetImageUrl();
        }

        return imageUrl;
    }

    public void ShowTrainingPopup()
    {
        IsTrainingPopupVisible = true;
    }
}
