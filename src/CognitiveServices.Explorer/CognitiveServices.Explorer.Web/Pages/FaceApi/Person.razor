@page "/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}"
@using CognitiveServices.Explorer.Domain.Face
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Person @PersonId</h3>

<div>
    <label>Face API Key:</label>
    <input type="password" @bind-value="@faceApiKey" />
</div>
<div>
    <label>Base URL:</label>
    <input type="text" @bind-value="@faceApiBaseUrl" />
</div>

<button class="btn btn-primary" @onclick="GetPerson">Get person (1 TR)</button>

<pre>
@rawJson
</pre>

<table border="1">
    <thead>
        <tr>
            <th> &nbsp; </th>
            <th>Person Id</th>
            <th>Name</th>
            <th>Faces IDs</th>
            <th>User Data</th>
        </tr>
    </thead>
    <tbody>
        @if (person != null)
        {
            var imageUrl = string.Empty;
            if (!string.IsNullOrWhiteSpace(person.UserData) && person.UserData.StartsWith("{"))
            {
                var customUserData = Newtonsoft.Json.JsonConvert.DeserializeObject<UserDataWithImageUrl>(person.UserData);
                imageUrl = customUserData.GetImageUrl();
            }
            <tr>
                <td>
                @if (!string.IsNullOrWhiteSpace(imageUrl))
                {
                    <img src="@imageUrl" width="60" />
                }
                else
                {
                    <span>&nbsp;</span>
                }</td>
                <td>@person.PersonId</td>
                <td>@person.Name</td>
                <td>
                    <ul>
                        @foreach (var face in person.PersistedFaceIds)
                        {
                            <li>
                                <a href="/face/v1.0/persongroups/@PersonGroupId/persons/@person.PersonId/persistedFaces/@face">@face</a>
                            </li>
                        }
                    </ul>
                </td>
                <td>@person.UserData</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string PersonGroupId { get; set; }
    [Parameter]
    public string PersonId { get; set; }

    string faceApiKey = string.Empty;
    string faceApiBaseUrl = string.Empty;
    string rawJson = string.Empty;
    PersonDto person = null;

    protected override async Task OnInitializedAsync()
    {
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        await GetPerson();
    }

    public async Task GetPerson()
    {
        faceApiBaseUrl = faceApiBaseUrl.TrimEnd('/');

        await localStorage.SetItemAsync(nameof(faceApiKey), faceApiKey);
        await localStorage.SetItemAsync(nameof(faceApiBaseUrl), faceApiBaseUrl);

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", faceApiKey);
        var result = await client.GetAsync(faceApiBaseUrl + $"/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}");
        rawJson = await result.Content.ReadAsStringAsync();

        try
        {
            person = Newtonsoft.Json.JsonConvert.DeserializeObject<PersonDto>(rawJson);
        }
        catch
        {
        }
    }
}
