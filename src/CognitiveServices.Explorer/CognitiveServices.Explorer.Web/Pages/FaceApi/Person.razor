@page "/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}"
@using CognitiveServices.Explorer.Domain.Face
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<FaceApiConfiguration />

<div class="content">
    @if (person != null)
    {
        var imageUrl = string.Empty;
        if (!string.IsNullOrWhiteSpace(person.UserData) && person.UserData.StartsWith("{"))
        {
            var customUserData = Newtonsoft.Json.JsonConvert.DeserializeObject<UserDataWithImageUrl>(person.UserData);
            imageUrl = customUserData.GetImageUrl();
        }

        <div class="card">
            <h5 class="card-header">Person details</h5>
            <div class="card-body">
                @if (!string.IsNullOrWhiteSpace(imageUrl))
                {
                    <img class="card-img-top" src="@imageUrl" alt="@person.Name's image" style="max-width: 200px;">
                }
                <h5 class="card-title">@person.Name</h5>
                <p class="card-text">Person ID: @person.PersonId</p>
                <p class="card-text">Faces:</p>
                <ul>
                    @foreach (var face in person.PersistedFaceIds)
                    {
                        <li>
                            <a href="face/v1.0/persongroups/@PersonGroupId/persons/@person.PersonId/persistedFaces/@face">@face</a>
                        </li>
                    }
                </ul>
            </div>

            @if (!string.IsNullOrWhiteSpace(person.UserData))
            {
                <div class="card-body">
                    <h5 class="card-title">User Data</h5>
                    <code>@person.UserData</code>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">Loading person Id @PersonId...</div>
    }

    <CurlRequest Request="requestData" />
</div>

@code {
    [Parameter]
    public string PersonGroupId { get; set; }
    [Parameter]
    public string PersonId { get; set; }

    string faceApiKey = string.Empty;
    string faceApiBaseUrl = string.Empty;
    string rawJson = string.Empty;
    PersonDto person = null;
    CurlRequestData requestData = new CurlRequestData
    {
        RequestName = "GET PersonGroup Person"
    };

    protected override async Task OnInitializedAsync()
    {
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        await GetPerson();
    }

    public async Task GetPerson()
    {
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", faceApiKey);
        var result = await client.GetAsync(faceApiBaseUrl + $"/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}");
        rawJson = await result.Content.ReadAsStringAsync();

        try
        {
            UpdateRequestOutput();
            person = Newtonsoft.Json.JsonConvert.DeserializeObject<PersonDto>(rawJson);
        }
        catch
        {
        }
    }

    public void UpdateRequestOutput()
    {
        requestData.SubscriptionKey = faceApiBaseUrl;
        requestData.Curl = $@"curl -X GET \
  '{faceApiBaseUrl}/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}' \
  -H 'Content-Type: application/json' \
  -H 'Ocp-Apim-Subscription-Key: [token]'
";
    }
}
