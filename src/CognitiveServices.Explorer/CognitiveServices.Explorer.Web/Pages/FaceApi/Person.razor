@page "/face/v1.0/persongroups/{PersonGroupId}/persons/{PersonId}"
@using CognitiveServices.Explorer.Application.ViewModels.FaceApi
@using CognitiveServices.Explorer.Domain.Face
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@using CognitiveServices.Explorer.Web.Shared.Profiles
@using System.IO;
@inject PersonViewModel viewModel
@inject Blazor.FileReader.IFileReaderService fileReaderService;

<ProfileSelector OnUpdated="viewModel.LoadLatestConfig" />

<div class="content">
    @if (viewModel.Person != null)
    {
        <div class="row mb-4 ml-0">
            <div style="width: 100px;" class="pull-left">
                <img src="@_imageUrl" style="width: 100px;" />
            </div>

            <div class="ml-3">
                <p>
                    <b>@viewModel.Person.Name</b><br />
                    <span style="color: #999;"><small>@viewModel.Person.PersonId</small></span>
                </p>
            </div>
        </div>

        <div>
            <b>UserData:</b><br />
            <UserData Person="viewModel.Person"></UserData>
        </div>

        <div>
            @if (viewModel.Person.PersistedFaceIds?.Any() == true)
            {
                <MatTable Items="viewModel.Person.PersistedFaceIds" SortBy="Name" Striped="true" ShowPaging="false">
                    <MatTableHeader>
                        <th style="padding: 0"></th>
                        <th>Face Id</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td style="padding: 0">
                            <MatIconButton Icon="delete" OnClick="@(() => ShowDeleteDialog(context))"></MatIconButton>
                        </td>
                        <td>@context</td>
                    </MatTableRow>
                </MatTable>
            }
        </div>



        <MatButton Raised="true" Icon="add" OnClick="@ShowAddDialog">Add face</MatButton>
        @*<MatButton Raised="true" Icon="memory" OnClick="@ShowDeleteDialog">Delete person</MatButton>*@
        <MatButton Raised="true" Icon="refresh" OnClick="@viewModel.GetPerson">Refresh</MatButton>
        <CurlRequestList Requests="viewModel.Requests" ServiceConfig="viewModel.FaceApiConfig" />
    }
    else
    {
        <div class="alert alert-info">Loading person Id @PersonId...</div>

        <MatButton Raised="true" Icon="refresh" OnClick="@viewModel.GetPerson">Refresh</MatButton>
        <CurlRequestList Requests="viewModel.Requests" ServiceConfig="viewModel.FaceApiConfig" />
    }
</div>

<MatDialog @bind-IsOpen="@_createOrEditDialogOpen">
    <MatDialogTitle>@(_isCreating ? "Add new" : "Edit") person</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@_face" OnValidSubmit="@CreateOrUpdate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@_faceImageUrl" Label="Image URL" Icon="image" IconTrailing="true" FullWidth="true" Required="false"></MatTextField>
                    <p><b>OR</b></p>
                    <input type="file" @ref=_inputTypeFileElement accept="image/*" />
                    <div class="alert alert-warning" role="alert">Is currently broken due Blazor 3.2.0 Preview 1 upgrade.</div>
                </div>
                <div class="form-group">
                    <MatSelect id="face-api-selected-group-id" Label="Detection model" @bind-Value="_selectedDetectionModel">
                        <MatOption Value="@FaceApiConstants.DetectModelV01">v01 (default)</MatOption>
                        <MatOption Value="@FaceApiConstants.DetectModelV02">v02 (improved accuracy)</MatOption>
                    </MatSelect>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@_face.UserData" Label="User data (optional)" Icon="view_list" IconTrailing="true" FullWidth="true" Required="false"></MatTextField>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _createOrEditDialogOpen = false; })">Cancel</MatButton>
        <MatButton Raised="true" OnClick="@CreateOrUpdate">@(_isCreating ? "Add" : "Edit") Face</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_deleteDialogOpen" Style="z-index:100">
    <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
    <MatDialogContent>
        Are you sure you want to delete face with ID "@_face?.PersistedFaceId"?
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _deleteDialogOpen = false; })">Cancel</MatButton>
        <MatButton Raised="true" OnClick="@Delete">Delete</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter] public string? PersonGroupId { get; set; }
    [Parameter] public string? PersonId { get; set; }
    private string _imageUrl = "images/Face/anonymous-avatar.jpg";

    private bool _createOrEditDialogOpen;
    private bool _isCreating;
    private bool _deleteDialogOpen;
    private FaceDto _face = new FaceDto();
    private string? _faceImageUrl;
    private string _selectedDetectionModel = FaceApiConstants.DetectModelV01;
    ElementReference _inputTypeFileElement;

    protected override async Task OnInitializedAsync()
    {
        viewModel.PersonGroupId = PersonGroupId;
        viewModel.PersonId = PersonId;
        await viewModel.OnInitializedAsync();

        if (!string.IsNullOrWhiteSpace(viewModel.Person?.UserData) && viewModel.Person!.UserData!.StartsWith("{"))
        {
            var customUserData = System.Text.Json.JsonSerializer.Deserialize<UserDataWithImageUrl>(viewModel.Person.UserData);
            var imageUrl = customUserData.GetImageUrl();
            if (!string.IsNullOrWhiteSpace(imageUrl))
            {
                _imageUrl = imageUrl;
            }
        }
    }

    public async Task CreateOrUpdate()
    {
        if (_isCreating)
        {
            var imageData = await ReadFile();
            if (imageData != null)
            {
                await viewModel.AddFace(_face, imageData, _selectedDetectionModel);
            }
            else if (!string.IsNullOrWhiteSpace(_faceImageUrl))
            {
                await viewModel.AddFace(_face, _faceImageUrl!, _selectedDetectionModel);
            }
        }
        else
        {
            await viewModel.UpdateFace(_face);
        }

        _createOrEditDialogOpen = false;
    }

    public void ShowAddDialog()
    {
        _isCreating = true;
        _createOrEditDialogOpen = true;
        _faceImageUrl = string.Empty;
    }

    public void ShowUpdateDialog(FaceDto face)
    {
        _face = new FaceDto
        {
            PersistedFaceId = face.PersistedFaceId,
            UserData = face.UserData
        };

        _isCreating = false;
        _createOrEditDialogOpen = true;
    }

    public void ShowDeleteDialog(string faceId)
    {
        _face = new FaceDto { PersistedFaceId = faceId };
        _deleteDialogOpen = true;
    }

    public async Task Delete()
    {
        if (!string.IsNullOrWhiteSpace(_face.PersistedFaceId))
        {
            await viewModel.DeleteFace(_face.PersistedFaceId!);
        }

        _face = new FaceDto();
        _deleteDialogOpen = false;
    }

    public async Task<byte[]?> ReadFile()
    {
        try
        {
            foreach (var file in await fileReaderService.CreateReference(_inputTypeFileElement).EnumerateFilesAsync())
            {
                int offset = 0;
                var buffer = new byte[4096];

                // Read into memory and act
                using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
                {
                    // Read into buffer and act (uses less memory)
                    using (Stream stream = await file.OpenReadAsync())
                    {
                        // Do (async) stuff with stream...
                        await stream.ReadAsync(buffer, 0, buffer.Length);
                        memoryStream.Write(buffer, offset, buffer.Length);

                        offset += buffer.Length;
                    }

                    return memoryStream.ToArray();
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        return null;
    }
}
