@using CognitiveServices.Explorer.Application
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ICognitiveServicesConfigService csConfigService

<div class="pull-right row align-items-center">
    @if (SelectedProfile != null)
    {
        <div>
            <EditForm Model="@SelectedProfile">
                <MatSelect id="face-api-selected-profile" Label="Face API Profile" @bind-Value="SelectedProfile">
                    @foreach (var profile in _profiles)
                    {
                        <MatOption Value="@profile.ProfileName">@profile.ProfileName</MatOption>
                    }
                </MatSelect>
            </EditForm>
        </div>

        <div>
            <MatButton Icon="add" Label="" OnClick="@((e) => OpenDialog())" Raised="true"></MatButton>
        </div>
    }
    else
    {
        <MatButton Icon="add" Label="New Account" OnClick="@((e) => OpenDialog())" Raised="true"></MatButton>
    }
</div>

<MatDialog @bind-IsOpen="@_dialogIsOpen">
    <MatDialogTitle>Add new Azure Face API</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@_newFaceApiConfig" OnValidSubmit="@SaveFaceApiConfigurations">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@_newFaceApiConfig.ProfileName" Label="Profile name (optional)" Icon="account_circle" IconTrailing="true" FullWidth="true" Required="false"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@_newFaceApiConfig.BaseUrl" Label="Base URL" Icon="cloud" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@_newFaceApiConfig.Token" Label="Subscription Key" Icon="vpn_key" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { _dialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@SaveFaceApiConfigurations">Add Face API</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    string? SelectedProfile
    {
        get { return _selectedProfile; }
        set
        {
            if (_selectedProfile != value)
            {
                _selectedProfile = value;
                csConfigService.SetSelectedProfile("FaceApi", value);
            }
        }
    }

    CognitiveServiceConfig _newFaceApiConfig = new CognitiveServiceConfig("FaceApi");
    List<CognitiveServiceConfig> _profiles = new List<CognitiveServiceConfig>();
    string? _selectedProfile;
    bool _dialogIsOpen;

    protected override async Task OnInitializedAsync()
    {
        string faceApiKey = await localStorage.GetItemAsync<string>("faceApiKey");
        string faceApiBaseUrl = await localStorage.GetItemAsync<string>("faceApiBaseUrl");

        // Backward compatibility
        if (!string.IsNullOrWhiteSpace(faceApiBaseUrl) && !string.IsNullOrWhiteSpace(faceApiKey))
        {
            var faceApiConfig = new CognitiveServiceConfig("FaceApi", "default2", faceApiBaseUrl, faceApiKey);
            await csConfigService.SetConfig(faceApiConfig);
        }

        await Refresh();
    }

    public async Task SaveFaceApiConfigurations()
    {
        // Remove backward compatibility.
        await localStorage.RemoveItemAsync("faceApiKey");
        await localStorage.RemoveItemAsync("faceApiBaseUrl");

        try
        {
            await csConfigService.SetConfig(_newFaceApiConfig);

            await Refresh();
        }
        catch
        {
            // TODO: Handle exceptions.
        }

        _dialogIsOpen = false;
    }

    public void OpenDialog()
    {
        _newFaceApiConfig = new CognitiveServiceConfig("FaceApi");
        _dialogIsOpen = true;
    }

    public async Task Refresh()
    {
        _selectedProfile = await csConfigService.GetSelectedProfileName("FaceApi");
        var dictionaryOfProfiles = await csConfigService.GetAllProfiles("FaceApi");
        _profiles = dictionaryOfProfiles.Select(d => d.Value).ToList();

        Console.WriteLine(_profiles.Count);
    }
}