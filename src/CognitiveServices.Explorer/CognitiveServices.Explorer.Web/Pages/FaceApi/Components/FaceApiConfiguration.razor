@using CognitiveServices.Explorer.Application
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ICognitiveServicesConfigService csConfigService

@if (faceApiConfig != null)
{
    <p>
        Selected account: @faceApiConfig.ProfileName
    </p>

    <MatButton Icon="add" Label="New Account" OnClick="@((e) => OpenDialog())" Raised="true"></MatButton>
}

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Add new Azure Face API</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@newFaceApiConfig" OnValidSubmit="@SaveFaceApiConfigurations">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@newFaceApiConfig.ProfileName" Label="Profile name (optional)" Icon="account_circle" IconTrailing="true" FullWidth="true" Required="false"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@newFaceApiConfig.BaseUrl" Label="Base URL" Icon="cloud" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
                <div class="form-group">
                    <MatTextField @bind-Value="@newFaceApiConfig.Token" Label="Subscription Key" Icon="vpn_key" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@SaveFaceApiConfigurations">Add Face API</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    CognitiveServiceConfig? faceApiConfig;
    CognitiveServiceConfig newFaceApiConfig = new CognitiveServiceConfig("FaceApi");
    bool dialogIsOpen;

    protected override async Task OnInitializedAsync()
    {
        string faceApiKey = await localStorage.GetItemAsync<string>("faceApiKey");
        string faceApiBaseUrl = await localStorage.GetItemAsync<string>("faceApiBaseUrl");

        // Backward compatibility
        if (!string.IsNullOrWhiteSpace(faceApiBaseUrl) && !string.IsNullOrWhiteSpace(faceApiKey))
        {
            faceApiConfig = new CognitiveServiceConfig("FaceApi", "default2", faceApiBaseUrl, faceApiKey);
            await csConfigService.SetConfig(faceApiConfig);
        }
        else
        {
            faceApiConfig = await csConfigService.GetConfig("FaceApi");
        }
    }

    public async Task SaveFaceApiConfigurations()
    {
        // Remove backward compatibility.
        await localStorage.RemoveItemAsync("faceApiKey");
        await localStorage.RemoveItemAsync("faceApiBaseUrl");

        try
        {
            await csConfigService.SetConfig(newFaceApiConfig);
            faceApiConfig = newFaceApiConfig;
        }
        catch
        {
            // TODO: Handle exceptions.
        }

        dialogIsOpen = false;
    }

    public void OpenDialog()
    {
        newFaceApiConfig = new CognitiveServiceConfig("FaceApi");
        dialogIsOpen = true;
    }
}