@page "/face/v1.0/detect"
@using CognitiveServices.Explorer.Application.ViewModels.FaceApi
@using CognitiveServices.Explorer.Domain.Face
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@using CognitiveServices.Explorer.Web.Shared.Profiles
@using System.IO;
@inject DetectViewModel viewModel
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject Blazor.FileReader.IFileReaderService fileReaderService;

<ProfileSelector OnUpdated="UpdatedProfile" />

<div class="content">
    <h3>Detect</h3>

    @if (viewModel.FaceApiConfig != null)
    {
        @if (viewModel.PersonGroups?.Any() == true)
        {
            <h5 class="mt-3">1. Get image</h5>

            <MatAccordion>
                <MatExpansionPanel @bind-Expanded="ImageUrlTabOpened">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>Image URL</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <MatTextField @bind-Value="@_faceImageUrl" Label="Image URL" Icon="image" IconTrailing="true" FullWidth="true" Required="false"></MatTextField>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
                <MatExpansionPanel @bind-Expanded="ImageUploadTabOpened">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>File Upload</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <input type="file" @ref=_inputTypeFileElement accept="image/*" />
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
                <MatExpansionPanel @bind-Expanded="WebCamTabOpened">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>Web cam</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <div class="videoCont">
                            <video crossorigin="anonymous" autoplay class="player"></video>
                        </div>

                        <canvas id="canvas" class="canvas" style="display: none;"></canvas>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>

            <h5 class="mt-3">2. Detect faces</h5>

            <div>
                <MatSelect id="face-api-selected-group-id" Label="Detection model" @bind-Value="viewModel.SelectedDetectionModel">
                    <MatOption Value="@FaceApiConstants.DetectModelV01">v01</MatOption>
                    <MatOption Value="@FaceApiConstants.DetectModelV02">v02 (recommended)</MatOption>
                </MatSelect>
                <a href="https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model" target="_blank">More details</a>
            </div>

            <div>
                <MatSelect id="face-api-selected-group-id" Label="Recognition model (based on the group)" @bind-Value="viewModel.SelectedRecognitionModel">
                    <MatOption Value="@FaceApiConstants.RecognitionModelV01">v01 (group default)</MatOption>
                    <MatOption Value="@FaceApiConstants.RecognitionModelV02">v02</MatOption>
                </MatSelect>
                <a href="https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model" target="_blank">More details</a>
            </div>

            <div class="mt-2">
                <button class="btn btn-primary" @onclick="DetectImage">Detect (1 TR)</button>
            </div>
        }
    }
    else
    {
        <div class="alert alert-warning" role="alert">Start by adding a new Face API account.</div>
    }

    <div class="py-2">
        @if (viewModel.Faces?.Any() == true)
        {
            <table class="table table-striped table-responsive mt-2">
                <thead>
                    <tr>
                        <th scope="col">Face Id</th>
                        <th scope="col">Position</th>
                        <th scope="col">Size</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var face in viewModel.Faces)
                    {
                        <tr>
                            <td>@face.faceId</td>
                            <td>@face.faceRectangle.left, @face.faceRectangle.top</td>
                            <td>@face.faceRectangle.width, @face.faceRectangle.height</td>
                        </tr>
                    }
                </tbody>
            </table>

            if (viewModel.PersonGroups != null)
            {
                <h5 class="mt-3">3. Select group</h5>
                <EditForm Model="@viewModel.SelectedPersonGroupId">
                    <MatSelect id="face-api-selected-group-id" Label="Group" @bind-Value="viewModel.SelectedPersonGroupId">
                        @foreach (var group in viewModel.PersonGroups)
                        {
                            <MatOption Value="@group.PersonGroupId">@group.Name</MatOption>
                        }
                    </MatSelect>
                </EditForm>

                <h5 class="mt-3">4. Identify faces</h5>

                <button class="btn btn-primary" @onclick="SendIdentifyRequest">Identify (1 TR)</button>

                if (viewModel.Candidates?.Any() == true)
                {
                    <h5 class="mt-3">5. Select identity for more details</h5>

                    <table class="table table-striped table-responsive">
                        <thead>
                            <tr>
                                <th scope="col">Face Id</th>
                                <th scope="col">Person Id</th>
                                <th scope="col">Confidence</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var potentialIdentity in viewModel.Candidates)
                            {
                                foreach (var candidate in potentialIdentity.Candidates)
                                {
                                    <tr>
                                        <td>@potentialIdentity.FaceId</td>
                                        <td><a href="face/v1.0/persongroups/@viewModel.SelectedPersonGroupId/persons/@candidate.PersonId">@candidate.PersonId</a></td>
                                        <td>@(Math.Round(candidate.Confidence * 100, 2))%</td>
                                    </tr>
                                }

                                if (!potentialIdentity.Candidates.Any())
                                {
                                    <tr>
                                        <td>@potentialIdentity.FaceId</td>
                                        <td>No candidates</td>
                                        <td>- %</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else if (viewModel.Candidates != null)
                {
                    <div class="alert alert-warning" role="alert">No identities found...</div>
                }
            }
            else if (viewModel.PersonGroups == null)
            {
                <div class="alert alert-warning" role="alert">Loading groups...</div>
            }
            else if (!viewModel.PersonGroups.Any())
            {
                <div class="alert alert-warning" role="alert">No groups available for identification process.</div>
            }
        }
        else if (viewModel.Faces != null)
        {
            <div class="alert alert-warning" role="alert">No faces found</div>
        }
        else if (isRunning)
        {
            <div class="alert alert-info" role="alert">Press "Detect" to get started. (1 transaction cost)</div>
        }
    </div>

    @if (!string.IsNullOrWhiteSpace(viewModel.Error))
    {
        <div class="alert alert-danger" role="alert">@viewModel.Error</div>
    }

    <CurlRequestList Requests="viewModel.Requests" ServiceConfig="viewModel.FaceApiConfig" />
</div>

@code {
    int imageTabIndex;
    string? _faceImageUrl;
    string groupId = string.Empty;
    bool isRunning = false;
    ElementReference _inputTypeFileElement;

    private string openedTab = "";

    public bool ImageUrlTabOpened
    {
        get { return openedTab == "imageUrl"; }
        set
        {
            if (value)
            {
                openedTab = "imageUrl";
                this.StateHasChanged();
            }
        }
    }

    public bool ImageUploadTabOpened
    {
        get { return openedTab == "imageUpload"; }
        set
        {
            if (value)
            {
                openedTab = "imageUpload";
                this.StateHasChanged();
            }
        }
    }

    public bool WebCamTabOpened
    {
        get { return openedTab == "webcam"; }
        set
        {
            if (value)
            {
                openedTab = "webcam";
                this.StateHasChanged();

                StartWebCam();
            }
            else
            {
                StopWebCam();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await viewModel.OnInitializedAsync().ConfigureAwait(false);
        //await StartWebCam();

        NavigationManager.LocationChanged += LocationChanged;
    }

    public void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        NavigationManager.LocationChanged -= LocationChanged;
        StopWebCam();
    }

    public async Task StartWebCam()
    {
        if (viewModel.FaceApiConfig != null && !isRunning)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("startVideoOnloaded");
                isRunning = true;
            }
            catch
            {
            }
        }
    }

    public async Task StopWebCam()
    {
        if (isRunning)
        {
            try
            {
                isRunning = false;
                await JSRuntime.InvokeVoidAsync("stopVideo");
            }
            catch
            {
            }
        }
    }

    public async Task DetectImage()
    {
        if (openedTab == "webcam")
        {
            if (!isRunning)
            {
                viewModel.Error = "Webcam is not running.";
                return;
            }

            var base64 = await JSRuntime.InvokeAsync<string>("getFrame");
            if (base64?.Contains(",") == true && base64.Length > 1)
            {
                base64 = base64.Split(',')[1];
                byte[] data = Convert.FromBase64String(base64);

                await viewModel.Detect(data);
            }
            else
            {
                viewModel.Error = "Unable to get image from webcam";
            }
        }
        else if (openedTab == "imageUrl")
        {
            if (string.IsNullOrWhiteSpace(_faceImageUrl))
            {
                viewModel.Error = "Image URL can't be empty.";
                return;
            }

            await viewModel.Detect(_faceImageUrl!);
        }
        else if (openedTab == "imageUpload")
        {
            var imageData = await ReadFile();
            if (imageData == null)
            {
                viewModel.Error = "Unable to load the image.";
                return;
            }

            await viewModel.Detect(imageData);
        }
    }

    public async Task SendIdentifyRequest()
    {
        await viewModel.Identify();

        base.StateHasChanged();
    }

    public async Task UpdatedProfile()
    {
        await viewModel.ProfileChanged();
        base.StateHasChanged();
    }

    public async Task<byte[]?> ReadFile()
    {
        try
        {
            foreach (var file in await fileReaderService.CreateReference(_inputTypeFileElement).EnumerateFilesAsync())
            {
                int offset = 0;
                var buffer = new byte[4096];

                // Read into memory and act
                using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
                {
                    // Read into buffer and act (uses less memory)
                    using (Stream stream = await file.OpenReadAsync())
                    {
                        // Do (async) stuff with stream...
                        await stream.ReadAsync(buffer, 0, buffer.Length);
                        memoryStream.Write(buffer, offset, buffer.Length);

                        offset += buffer.Length;
                    }

                    return memoryStream.ToArray();
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        return null;
    }
}
