@page "/face/v1.0/detect"
@using CognitiveServices.Explorer.Domain.Face
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<FaceApiConfiguration />

<div class="content">
    <h3>Detect</h3>

    <div class="videoCont">
        <video crossorigin="anonymous" autoplay class="player"></video>
    </div>

    <canvas id="canvas" class="canvas" style="display: none;"></canvas>

    <button class="btn btn-primary" @onclick="SendFrameToDetect">Detect (1 TR)</button>

    <div class="py-2">
        @if (faces != null && faces.Any())
        {
            <table class="table table-striped table-responsive">
                <thead>
                    <tr>
                        <th scope="col">Face Id</th>
                        <th scope="col">Position</th>
                        <th scope="col">Size</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var face in faces)
                    {
                        <tr>
                            <td>@face.faceId</td>
                            <td>@face.faceRectangle.left, @face.faceRectangle.top</td>
                            <td>@face.faceRectangle.width, @face.faceRectangle.height</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon3">Face Group ID</span>
                </div>
                <input type="text" class="form-control" id="basic-url" aria-describedby="basic-addon3" placeholder="Face group ID" @bind-value="@groupId" />
            </div>

            <button class="btn btn-primary" @onclick="SendIdentifyRequest">Identify (1 TR)</button>

            if (candidates?.Any() == true)
            {
            <table class="table table-striped table-responsive">
                <thead>
                    <tr>
                        <th scope="col">Face Id</th>
                        <th scope="col">Person Id</th>
                        <th scope="col">Confidence</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var potentialIdentity in candidates)
                    {
                        foreach (var candidate in potentialIdentity.Candidates)
                        {
                        <tr>
                            <td>@potentialIdentity.FaceId</td>
                            <td><a href="face/v1.0/persongroups/@groupId/persons/@candidate.PersonId">@candidate.PersonId</a></td>
                            <td>@(Math.Round(candidate.Confidence * 100, 2))%</td>
                        </tr>
                        }
                    }
                </tbody>
            </table>
            }
        }
        else if (faces != null)
        {
            <div class="alert alert-warning" role="alert">No faces found</div>
        }
        else if (!string.IsNullOrWhiteSpace(error))
        {
            <div class="alert alert-danger" role="alert">@error</div>
        }
        else
        {
            <div class="alert alert-info" role="alert">Press "Get groups" to get started. (1 transaction cost)</div>
        }
    </div>

    @*<CurlRequest Request="requestData" />*@
</div>

@code {
    string faceApiKey = string.Empty;
    string faceApiBaseUrl = string.Empty;
    string rawJson = string.Empty;
    string groupId = string.Empty;
    List<DetectedFaceDto>? faces = null;
    List<IdentityCandidate>? candidates = null;
    CurlRequestData requestData = new CurlRequestData
    {
        RequestName = "GET PersonGroup list"
    };
    string error = "";

    protected override async Task OnInitializedAsync()
    {
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));
        UpdateRequestOutput();

        await JSRuntime.InvokeVoidAsync("startVideoOnloaded");
    }

    public async Task SendFrameToDetect()
    {
        var base64 = await JSRuntime.InvokeAsync<string>("getFrame");
        if (base64?.Contains(",") == true && base64.Length > 1)
        {
            base64 = base64.Split(',')[1];
            byte[] data = Convert.FromBase64String(base64);
            error = data.Length.ToString();

            await SendDetectRequest(data);
        }
    }

    public async Task SendDetectRequest(byte[] imageByteData)
    {
        error = string.Empty;

        // Get the keys again just in case.
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        try
        {
            UpdateRequestOutput();

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(faceApiBaseUrl);
                using (var content = new ByteArrayContent(imageByteData))
                {
                    content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
                    content.Headers.Add("Ocp-Apim-Subscription-Key", faceApiKey);

                    var requestUrl = $"/face/v1.0/detect";
                    using (var response = await client.PostAsync(requestUrl, content))
                    {
                        Console.WriteLine(rawJson);
                        rawJson = await response.Content.ReadAsStringAsync();
                        faces = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DetectedFaceDto>>(rawJson);
                    }
                }
            }
        }
        catch (Exception e)
        {
            error = e.ToString();
        }
    }

    public async Task SendIdentifyRequest()
    {
        error = string.Empty;

        // Get the keys again just in case.
        faceApiKey = await localStorage.GetItemAsync<string>(nameof(faceApiKey));
        faceApiBaseUrl = await localStorage.GetItemAsync<string>(nameof(faceApiBaseUrl));

        try
        {
            UpdateRequestOutput();

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(faceApiBaseUrl);
                var requestData = new
                {
                    personGroupId = groupId,
                    faceIds = faces.Select(f => f.faceId),
                    maxNumOfCandidatesReturned = 1,
                    confidenceThreshold = 0.3
                };

                rawJson = Newtonsoft.Json.JsonConvert.SerializeObject(requestData);
                using (var content = new StringContent(rawJson))
                {
                    content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
                    content.Headers.Add("Ocp-Apim-Subscription-Key", faceApiKey);

                    var requestUrl = $"/face/v1.0/identify";
                    using (var response = await client.PostAsync(requestUrl, content))
                    {
                        rawJson = await response.Content.ReadAsStringAsync();
                        candidates = Newtonsoft.Json.JsonConvert.DeserializeObject<List<IdentityCandidate>>(rawJson);
                    }
                }
            }
        }
        catch (Exception e)
        {
            error = e.ToString();
        }
    }

    public void UpdateRequestOutput()
    {
        requestData.SubscriptionKey = faceApiKey;
        requestData.Curl = $@"curl -X POST \
  {faceApiBaseUrl}/face/v1.0/identify \
  -H 'Content-Type: application/json' \
  -H 'Ocp-Apim-Subscription-Key: [token]' \
  -d '{{
    ""personGroupId"": ""{groupId}"",
    ""faceIds"": [
        ""986c3440-e0cc-48bb-af4e-bcf9685e81d3""
    ],
    ""maxNumOfCandidatesReturned"": 1,
    ""confidenceThreshold"": 0.3
}}'";
    }
}
