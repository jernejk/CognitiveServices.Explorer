@page "/face/v1.0/detect"
@using CognitiveServices.Explorer.Application.ViewModels.FaceApi
@using CognitiveServices.Explorer.Web.Pages.FaceApi.Components
@inject DetectViewModel viewModel
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<FaceApiConfiguration OnUpdated="UpdatedProfile" />

<div class="content">
    <h3>Detect</h3>

    <div class="videoCont">
        <video crossorigin="anonymous" autoplay class="player"></video>
    </div>

    <canvas id="canvas" class="canvas" style="display: none;"></canvas>

    @if (viewModel.FaceApiConfig != null)
    {
        <button class="btn btn-primary" @onclick="SendFrameToDetect">Detect (1 TR)</button>
    }
    else
    {
        <div class="alert alert-warning" role="alert">Start by adding a new Face API account.</div>
    }

    <div class="py-2">
        @if (viewModel.Faces?.Any() == true)
        {
            <table class="table table-striped table-responsive">
                <thead>
                    <tr>
                        <th scope="col">Face Id</th>
                        <th scope="col">Position</th>
                        <th scope="col">Size</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var face in viewModel.Faces)
                    {
                        <tr>
                            <td>@face.faceId</td>
                            <td>@face.faceRectangle.left, @face.faceRectangle.top</td>
                            <td>@face.faceRectangle.width, @face.faceRectangle.height</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon3">Face Group ID</span>
                </div>
                <input type="text" class="form-control" id="basic-url" aria-describedby="basic-addon3" placeholder="Face group ID" @bind-value="@groupId" />
            </div>

            <button class="btn btn-primary" @onclick="SendIdentifyRequest">Identify (1 TR)</button>

            if (viewModel.Candidates?.Any() == true)
            {
                <table class="table table-striped table-responsive">
                    <thead>
                        <tr>
                            <th scope="col">Face Id</th>
                            <th scope="col">Person Id</th>
                            <th scope="col">Confidence</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var potentialIdentity in viewModel.Candidates)
                        {
                            foreach (var candidate in potentialIdentity.Candidates)
                            {
                                <tr>
                                    <td>@potentialIdentity.FaceId</td>
                                    <td><a href="face/v1.0/persongroups/@groupId/persons/@candidate.PersonId">@candidate.PersonId</a></td>
                                    <td>@(Math.Round(candidate.Confidence * 100, 2))%</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        }
        else if (viewModel.Faces != null)
        {
            <div class="alert alert-warning" role="alert">No faces found</div>
        }
        else if (!string.IsNullOrWhiteSpace(viewModel.Error))
        {
            <div class="alert alert-danger" role="alert">@viewModel.Error</div>
        }
        else if (isRunning)
        {
            <div class="alert alert-info" role="alert">Press "Detect" to get started. (1 transaction cost)</div>
        }
    </div>

    <CurlRequestList Requests="viewModel.Requests" ServiceConfig="viewModel.FaceApiConfig" />
</div>

@code {
    string groupId = string.Empty;
    bool isRunning = false;

    protected override async Task OnInitializedAsync()
    {
        await viewModel.OnInitializedAsync().ConfigureAwait(false);
        await StartWebCam();

        NavigationManager.LocationChanged += LocationChanged;
    }

    public void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        NavigationManager.LocationChanged -= LocationChanged;
        Stop();
    }

    public async Task StartWebCam()
    {
        if (viewModel.FaceApiConfig != null && !isRunning)
        {
            await JSRuntime.InvokeVoidAsync("startVideoOnloaded");
            isRunning = true;
        }
    }

    public async Task Stop()
    {
        if (isRunning)
        {
            isRunning = false;
            await JSRuntime.InvokeVoidAsync("stopVideo");
        }
    }

    public async Task SendFrameToDetect()
    {
        var base64 = await JSRuntime.InvokeAsync<string>("getFrame");
        if (base64?.Contains(",") == true && base64.Length > 1)
        {
            base64 = base64.Split(',')[1];
            byte[] data = Convert.FromBase64String(base64);

            await viewModel.Detect(data);
        }
    }

    public async Task SendIdentifyRequest()
    {
        await viewModel.Identify(groupId);

        base.StateHasChanged();
    }

    public async Task UpdatedProfile()
    {
        await viewModel.LoadLatestConfig();
        await StartWebCam();
        base.StateHasChanged();
    }
}
